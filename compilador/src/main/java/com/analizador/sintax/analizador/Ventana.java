package com.analizador.sintax.analizador;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import javax.swing.JFrame;

import org.antlr.v4.runtime.ANTLRFileStream;
import org.antlr.v4.runtime.CommonTokenStream;

public class Ventana extends JFrame implements ActionListener {

	private static final String EXTENSION = "txt";
	String[] args =null;
	String prueba = "void impresion() {"
       + "int x;"
       + "x=5;"
       +"println(6);"
       + "int y;"
       +"y=x;"
+"} ";
	
	GestorError e = new GestorError();
			    public Ventana(String[] arg) {
			    	this.args=arg;
			        initComponents();
			        txtArea.setText(prueba);
			    }
			    
			    /** 
			     * This method is called from within the constructor to initialize the form.
			     * WARNING: Do NOT modify this code. The content of this method is always
			     * regenerated by the Form Editor.
			     */
			    @SuppressWarnings("unchecked")
			    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
			    private void initComponents() {

			        jLabel1 = new javax.swing.JLabel();
			        jScrollPane1 = new javax.swing.JScrollPane();
			        txtArea = new javax.swing.JTextArea();
			        btnAnalizar = new javax.swing.JButton();
			        txtResultado = new javax.swing.JLabel();
			        jLabel2 = new javax.swing.JLabel();

			        jLabel1.setText("jLabel1");

			        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

			        txtArea.setColumns(20);
			        txtArea.setRows(5);
			        jScrollPane1.setViewportView(txtArea);

			        btnAnalizar.setLabel("ANALIZAR");
			        btnAnalizar.addActionListener(this);

			        txtResultado.setText("RESULTADO");

			        jLabel2.setText("Analizador sint√°ctico");

			        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
			        getContentPane().setLayout(layout);
			        layout.setHorizontalGroup(
			            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
			            .addGroup(layout.createSequentialGroup()
			                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
			                    .addGroup(layout.createSequentialGroup()
			                        .addGap(26, 26, 26)
			                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
			                        .addGap(45, 45, 45)
			                        .addComponent(btnAnalizar))
			                    .addGroup(layout.createSequentialGroup()
			                        .addGap(117, 117, 117)
			                        .addComponent(txtResultado))
			                    .addGroup(layout.createSequentialGroup()
			                        .addGap(44, 44, 44)
			                        .addComponent(jLabel2)))
			                .addContainerGap(34, Short.MAX_VALUE))
			        );
			        layout.setVerticalGroup(
			            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
			            .addGroup(layout.createSequentialGroup()
			                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
			                    .addGroup(layout.createSequentialGroup()
			                        .addGap(19, 19, 19)
			                        .addComponent(jLabel2)
			                        .addGap(18, 18, 18)
			                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
			                    .addGroup(layout.createSequentialGroup()
			                        .addGap(93, 93, 93)
			                        .addComponent(btnAnalizar)))
			                .addGap(39, 39, 39)
			                .addComponent(txtResultado)
			                .addContainerGap(61, Short.MAX_VALUE))
			        );

			        btnAnalizar.getAccessibleContext().setAccessibleName("");
			        btnAnalizar.getAccessibleContext().setAccessibleDescription("");

			        pack();
			    }// </editor-fold>//GEN-END:initComponents



			    /**
			     * @param args the command line arguments
			     */
			    

			    // Variables declaration - do not modify//GEN-BEGIN:variables
			    private javax.swing.JButton btnAnalizar;
			    private javax.swing.JLabel jLabel1;
			    private javax.swing.JLabel jLabel2;
			    private javax.swing.JScrollPane jScrollPane1;
			    private javax.swing.JTextArea txtArea ;
			    private javax.swing.JLabel txtResultado;
			    // End of variables declaration//GEN-END:variables
			
	
	
	
	
	@Override
	public void actionPerformed(ActionEvent arg0) {
		// TODO Auto-generated method stub
		
		String texto = txtArea.getText();
		File archivo = new File("C:/Users/luisy/git/analizador/analizador/test/test.txt"); // este es el archivo que insertaras caracteres
		
		
			FileWriter escribir;
			try {
				escribir = new FileWriter(archivo);
				escribir.write(texto);
				escribir.flush();
				escribir.close();
				this.Analizar();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			
			
			
			
			//
			
		
		
		
		
	}
	
	public void Analizar() {
		
		try{
		String program = args.length > 1 ? args[1] : "test/test." + EXTENSION;

		System.out.println("Interpreting file " + program);

		SimpleLexer lexer = new SimpleLexer(new ANTLRFileStream(program));
		CommonTokenStream tokens = new CommonTokenStream(lexer);
		SimpleParser parser = new SimpleParser(tokens);

		SimpleParser.ProgramaContext tree = parser.programa();

		SimpleCustomVisitor visitor = new SimpleCustomVisitor();
		
		
		visitor.visit(tree);
		
		
		
		System.out.println("Interpretation finished");
		for(int i=0; i<e.error.size(); i++){
			System.out.println("ERRORES "+ e.error.get(i));
		}
		}
		
		
		
		catch(IOException e){
			System.out.println("ERROR "+ e);
		}
		
	}
		
}
